import numpy as np

phiM = 50.25
lambM = 20.75

def GK(phi, lamb, lamb0):
    a = 6378137
    e2 = 0.00669437999013
    a2 = a ** 2
    b2 = a2 * (1 - e2)
    ep2 = (a2 - b2) / b2
    lamb0 = np.deg2rad(lamb0)
    lamb = np.deg2rad(lamb)
    phi = np.deg2rad(phi)
    deltalamb = lamb - lamb0
    t = np.tan(phi)
    eta2 = ep2 * (np.cos(phi) ** 2)
    N = a / (np.sqrt(1 - e2 * (np.sin(phi) ** 2)))
    a0 = 1 - (e2/4) - ((3 * (e2 ** 2)) / 64) - ((5 * (e2 ** 3)) / 256)
    a02 = 3/8 * (e2 + ((e2 ** 2) / 4) + ((15 * (e2 ** 3)) / 128))
    a4 = 15/256 * ((e2 ** 2) + ((3 * (e2 ** 3)) / 4))
    a6 = (35 * (e2 ** 3)) / 3072
    sigma = a * (a0 * phi - a02 * np.sin(2 * phi) + a4 * np.sin(4 * phi) - a6 * np.sin(6 * phi))
    xkg = sigma + ((deltalamb ** 2) / 2) * N * np.sin(phi) * np.cos(phi) * (1 + ((deltalamb ** 2) / 12) * \
          (np.cos(phi) ** 2) * (5 - t ** 2 + 9 * eta2 + (4 * (eta2 ** 2))) + ((deltalamb ** 4) / 360) * \
          (np.cos(phi) ** 4) * (61 - (58 * (t ** 2)) + (t ** 4) + (270 * eta2) - (330 * eta2 * (t ** 2))))
    ykg = deltalamb * N * np.cos(phi) * (1 + ((deltalamb ** 2) / 6) * (np.cos(phi) ** 2) * (1 - t ** 2 + eta2) + \
                                         ((deltalamb ** 4) / 120) * (np.cos(phi) ** 4) * (5 - 18 * (t **2) + (t ** 4) + \
                                                                                          14 * eta2 - 58 * eta2 * (t ** 2)))
    return xkg, ykg
print(GK(phiM,lambM,19))
xgk1,ygk1 = GK(phiM,lambM,19)

def fromGK(xgk, ygk):
    a = 6378137
    e2 = 0.00669437999013
    a2 = a ** 2
    b2 = a2 * (1 - e2)
    ep2 = (a2 - b2) / b2
    lamb0 = np.deg2rad(19)
    a0 = 1 - (e2 / 4) - ((3 * (e2 ** 2)) / 64) - ((5 * (e2 ** 3)) / 256)
    a02 = 3 / 8 * (e2 + ((e2 ** 2) / 4) + ((15 * (e2 ** 3)) / 128))
    a4 = 15 / 256 * ((e2 ** 2) + ((3 * (e2 ** 3)) / 4))
    a6 = (35 * (e2 ** 3)) / 3072
    phi1 = xgk / (a * a0)
    sigma = a * (a0 * phi1 - a02 * np.sin(2 * phi1) + a4 * np.sin(4 * phi1) - a6 * np.sin(6 * phi1))

    while True:
        phi2 = phi1 + (xgk - sigma) / (a * a0)
        sigma = a * (a0 * phi2 - a02 * np.sin(2 * phi2) + a4 * np.sin(4 * phi2) - a6 * np.sin(6 * phi2))
        M = (a * (1 - e2)) / (np.sqrt((1 - e2 * (np.sin(phi2) ** 2)) ** 3))
        N = a / (np.sqrt(1 - e2 * (np.sin(phi2) ** 2)))
        t = np.tan(phi2)
        eta2 = ep2 * (np.cos(phi2) ** 2)
        if abs(phi2 - phi1) < np.deg2rad(0.000001 / 3600):
            break
        else:
            phi1 = phi2

    phi1 = phi2 - ((ygk ** 2) * t / (2 * M * N)) * (1 - ygk ** 2 / (12 * (N ** 2)) * (5 + 3 * (t ** 2) + eta2 - 9 * eta2 *
                                                                                  (t ** 2) - 4 * (eta2 ** 2)) +
                                                  (ygk ** 4) / (360 * (N ** 4)) * (61 + 90 * (t ** 2) + 45 * (t ** 4)))
    lamb1 = lamb0 + (ygk / (N * np.cos(phi2))) * (1 - ygk ** 2 / (6 * (N ** 2)) * (1 + 2 * (t ** 2) + eta2) +
                                                (ygk ** 4) / (120 * (N ** 4)) * (5 + 28 * (t **2) + 24 * (t ** 4) + \
                                                                                          6 * eta2 + 8 * eta2 * (t ** 2)))
    phi1 = np.rad2deg(phi1)
    lamb1 = np.rad2deg(lamb1)
    return phi1, lamb1

print(fromGK(xgk1, ygk1))

def u1992(xgk,ygk):
    m0 = 0.9993
    x1992 = m0 * xgk - 5300000
    y1992 = m0 * ygk + 500000
    return x1992, y1992

def u2000(phiM,lambM):
    m0 = 0.999923
    xgk, ygk = GK(phiM, lambM, 21)
    x = m0 * xgk
    y = m0 * ygk + 7 * 1000000 + 500000
    return x, y

def u1992toGK():
    x,y = u1992(xgk1,ygk1)
    m0 = 0.9993
    xgk = (x + 5300000) / m0
    ygk = (y - 500000) / m0
    return xgk, ygk

def u2000toGK():
    x,y = u2000(phiM,lambM)
    m0 = 0.999923
    xgk = x / m0
    ygk = (y - (7 * 1000000) - 500000) / m0
    return xgk, ygk

